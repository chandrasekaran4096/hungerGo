Excellent idea 💡 — yes, we can absolutely add a **search bar** that filters restaurants **dynamically** based on the restaurant name (either locally after loading data OR directly by querying your backend).

Let’s extend your setup to include:
✅ A **stylish Tailwind search bar** above the restaurant cards.
✅ **Live filtering** using **jQuery** — no reloads.
✅ Option to also fetch from backend if you want “server-side search”.

---

## 🧩 Updated Folder Overview

```
index.html
assets/
 ├── css/style.css
 └── js/main.js
```

---

## 🧠 Updated `index.html`

We’ll add a **search bar** inside the restaurant section header.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>BiteBuddy 🍴</title>

  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="assets/css/style.css" />
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
</head>

<body class="overflow-x-hidden bg-neutral-950 text-white font-[Poppins]">
  <!-- Navbar -->
  <nav class="flex justify-between items-center px-8 py-4 bg-black/70 backdrop-blur-md fixed w-full top-0 z-50 shadow-lg">
    <h1 class="text-3xl font-bold text-orange-500">BiteBuddy</h1>
    <ul class="flex space-x-6 text-lg">
      <li><a href="#home" class="hover:text-orange-500 transition">Home</a></li>
      <li><a href="#about" class="hover:text-orange-500 transition">About</a></li>
      <li><a href="cart.html" class="hover:text-orange-500 transition">Cart</a></li>
      <li><a href="login.html" class="hover:text-orange-500 transition">Login</a></li>
      <li><a href="orders.html" class="hover:text-orange-500 transition">Orders</a></li>
    </ul>
  </nav>

  <!-- Hero Section -->
  <section id="home" class="relative h-screen flex items-center justify-center text-center text-white">
    <video autoplay muted loop class="absolute w-full h-full object-cover brightness-50 -z-10">
      <source src="https://videos.pexels.com/video-files/3298718/3298718-uhd_2732_1440_25fps.mp4" type="video/mp4">
    </video>
    <div class="fade-in max-w-2xl px-6">
      <h2 class="text-5xl font-bold mb-4 drop-shadow-lg">Welcome to BiteBuddy 🍴</h2>
      <p class="text-lg md:text-xl text-gray-200">
        "Food that understands your stack overflow — Welcome to BiteBuddy" 🍲💾
      </p>
    </div>
  </section>

  <!-- Restaurant Section -->
  <section id="restaurants" class="py-20 px-10">
    <div class="text-center mb-10 fade-in">
      <h2 class="text-4xl font-bold text-orange-500 mb-6">Explore Restaurants</h2>
      <input
        type="text"
        id="searchInput"
        placeholder="Search by restaurant name..."
        class="w-full max-w-md mx-auto block px-4 py-2 text-gray-800 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
      />
    </div>

    <div id="restaurantContainer" class="grid gap-10 sm:grid-cols-2 lg:grid-cols-3"></div>
  </section>

  <!-- About Section -->
  <section id="about" class="bg-neutral-900 text-center py-20 px-6">
    <h2 class="text-4xl font-bold text-orange-500 mb-6">About BiteBuddy</h2>
    <p class="text-lg max-w-3xl mx-auto leading-relaxed text-gray-300">
      BiteBuddy connects hungry hearts with their favorite restaurants. With fast delivery, 
      a variety of cuisines, and easy ordering, we're here to serve you joy on a plate.
    </p>
  </section>

  <!-- Footer -->
  <footer class="bg-black text-center py-4 text-gray-400 text-sm">
    &copy; 2025 BiteBuddy. All rights reserved.
  </footer>

  <script src="assets/js/main.js"></script>
</body>
</html>
```

---

## ⚙️ Updated `assets/js/main.js`

We’ll now add **search filtering logic** and **backend call**.

```javascript
$(document).ready(function () {
  let allRestaurants = []; // store all fetched data

  // 🔸 Scroll fade animation
  $(window).on("scroll", function () {
    $(".fade-in").each(function () {
      const top = $(this).offset().top;
      const scroll = $(window).scrollTop();
      const windowHeight = $(window).height();
      if (scroll + windowHeight > top + 50) $(this).addClass("visible");
    });
  });

  // 🔸 Fetch restaurants from backend
  function loadRestaurants(query = "") {
    $.ajax({
      url: "http://localhost:8080/BiteBuddy/api/restaurants",
      method: "GET",
      data: { search: query }, // optional if your backend supports ?search=
      dataType: "json",
      success: function (data) {
        allRestaurants = data;
        renderRestaurants(data);
      },
      error: function () {
        $("#restaurantContainer").html(`
          <p class="text-center text-gray-400 text-lg col-span-full">Failed to load restaurants. Please try again later.</p>
        `);
      },
    });
  }

  // 🔸 Render restaurant cards
  function renderRestaurants(list) {
    $("#restaurantContainer").empty();

    if (!list || list.length === 0) {
      $("#restaurantContainer").html(`
        <p class="text-center text-gray-400 text-lg col-span-full">No restaurants found.</p>
      `);
      return;
    }

    list.forEach((r) => {
      $("#restaurantContainer").append(`
        <a href="menu.html?restaurant_id=${r.restaurant_id}">
          <div class="fade-in bg-white/10 backdrop-blur-lg border border-white/20 rounded-2xl p-5 card-hover cursor-pointer">
            <img src="${r.imagepath}" alt="${r.name}" class="w-full h-48 object-cover rounded-xl mb-4">
            <h3 class="text-2xl text-orange-500 font-semibold mb-2">${r.name}</h3>
            <p class="text-gray-300"><strong>ETA:</strong> ${r.delivery_time}</p>
            <p class="text-gray-300"><strong>Address:</strong> ${r.address}</p>
            <p class="text-gray-300"><strong>Cuisine:</strong> ${r.cuisine_type}</p>
          </div>
        </a>
      `);
    });

    $(window).trigger("scroll"); // trigger animation after rendering
  }

  // 🔸 Search handler (local filtering)
  $("#searchInput").on("keyup", function () {
    const query = $(this).val().toLowerCase().trim();

    // If backend supports searching: uncomment next line
    // loadRestaurants(query);

    // Otherwise, do client-side filtering:
    const filtered = allRestaurants.filter((r) =>
      r.name.toLowerCase().includes(query)
    );
    renderRestaurants(filtered);
  });

  // Initial load
  loadRestaurants();
});
```

---

## 🧠 Backend (Search Support Example)

If you prefer **server-side filtering**, modify your Java servlet like this:

```java
@WebServlet("/api/restaurants")
public class RestaurantAPI extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String search = request.getParameter("search");
        response.setContentType("application/json");

        List<Restaurant> restaurants;
        if (search != null && !search.isEmpty()) {
            restaurants = new RestaurantDAO().searchByName(search);
        } else {
            restaurants = new RestaurantDAO().getAllRestaurants();
        }

        new Gson().toJson(restaurants, response.getWriter());
    }
}
```

---

## 🌟 Result

✅ **Beautiful Tailwind UI** with search bar
✅ **Real-time filtering** using jQuery
✅ Works with **backend or local filtering**
✅ Smooth **fade animations**
✅ **Clickable restaurant cards** linking to `menu.html?restaurant_id=...`

---

Would you like me to add a **“loading spinner” animation** while fetching data from the backend (so it looks more professional)?
