Perfect üí™ ‚Äî this is a **core part of your BiteBuddy food delivery system**, so let‚Äôs design it properly and completely.

We‚Äôll build a **full Cart module** (frontend + backend) in a clean architecture style ‚Äî with **Tailwind + jQuery** on the frontend, and **JSP + Servlet + DAO + Service + Model + MySQL** on the backend.

---

## üß© **Module Overview ‚Äî Cart Page**

| Layer    | Purpose                                            |
| -------- | -------------------------------------------------- |
| Model    | Java POJO for Cart, Menu, and User                 |
| DAO      | Database interaction (CRUD for cart)               |
| Service  | Business logic (fetch cart, update quantity, etc.) |
| Servlet  | API endpoint for AJAX requests                     |
| JSP/HTML | Cart UI (Tailwind styled, jQuery driven)           |
| jQuery   | Handles dynamic updates, totals, AJAX calls        |

---

## üß† **Functional Requirements**

‚úÖ User must be logged in to access the cart
‚úÖ Cart should only show items from a single restaurant
‚úÖ Each item shows:

* Image
* Item Name
* Price
* Quantity (with ‚ûï ‚ûñ buttons)
* Total Price
* Checkbox (to place order)
  ‚úÖ ‚ÄúPlace Order‚Äù button for selected items
  ‚úÖ Automatically updates total when quantity changes
  ‚úÖ Allows deleting an item

---

## üóÑÔ∏è 1Ô∏è‚É£ Model Layer ‚Äî `Cart.java`

```java
package com.tap.model;

public class Cart {
    private int cartId;
    private int userId;
    private int menuId;
    private String itemName;
    private double price;
    private int quantity;
    private String imagePath;
    private int restaurantId;

    // Getters and Setters
    public int getCartId() { return cartId; }
    public void setCartId(int cartId) { this.cartId = cartId; }

    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }

    public int getMenuId() { return menuId; }
    public void setMenuId(int menuId) { this.menuId = menuId; }

    public String getItemName() { return itemName; }
    public void setItemName(String itemName) { this.itemName = itemName; }

    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }

    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }

    public String getImagePath() { return imagePath; }
    public void setImagePath(String imagePath) { this.imagePath = imagePath; }

    public int getRestaurantId() { return restaurantId; }
    public void setRestaurantId(int restaurantId) { this.restaurantId = restaurantId; }
}
```

---

## üíæ 2Ô∏è‚É£ DAO Layer ‚Äî `CartDAO.java`

```java
package com.tap.dao;

import java.sql.*;
import java.util.*;
import com.tap.model.Cart;
import com.tap.utils.DBConnection;

public class CartDAO {

    public List<Cart> getUserCart(int userId) {
        List<Cart> list = new ArrayList<>();
        String sql = """
            SELECT c.cart_id, c.menu_id, c.userid, c.quantity, m.item_name, m.price, m.img, m.restaurant_id
            FROM food.M_S_CART c
            JOIN food.M_S_MENU m ON c.menu_id = m.menu_id
            WHERE c.userid=? AND c.is_deleted=0
        """;

        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Cart cart = new Cart();
                cart.setCartId(rs.getInt("cart_id"));
                cart.setUserId(rs.getInt("userid"));
                cart.setMenuId(rs.getInt("menu_id"));
                cart.setItemName(rs.getString("item_name"));
                cart.setPrice(rs.getDouble("price"));
                cart.setQuantity(rs.getInt("quantity"));
                cart.setImagePath(rs.getString("img"));
                cart.setRestaurantId(rs.getInt("restaurant_id"));
                list.add(cart);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public void updateQuantity(int cartId, int quantity) {
        String sql = "UPDATE food.M_S_CART SET quantity=?, updated_at=GETDATE() WHERE cart_id=?";
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, quantity);
            ps.setInt(2, cartId);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deleteCartItem(int cartId) {
        String sql = "UPDATE food.M_S_CART SET is_deleted=1 WHERE cart_id=?";
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, cartId);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

---

## üß∞ 3Ô∏è‚É£ Service Layer ‚Äî `CartService.java`

```java
package com.tap.service;

import java.util.List;
import com.tap.dao.CartDAO;
import com.tap.model.Cart;

public class CartService {
    private CartDAO dao = new CartDAO();

    public List<Cart> getCartByUser(int userId) {
        return dao.getUserCart(userId);
    }

    public void updateQuantity(int cartId, int quantity) {
        dao.updateQuantity(cartId, quantity);
    }

    public void deleteItem(int cartId) {
        dao.deleteCartItem(cartId);
    }
}
```

---

## üåê 4Ô∏è‚É£ Servlet ‚Äî `CartServlet.java`

```java
package com.tap.controller;

import com.tap.service.CartService;
import com.tap.model.Cart;
import com.google.gson.Gson;
import jakarta.servlet.*;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.util.List;

@WebServlet("/CartServlet")
public class CartServlet extends HttpServlet {
    private CartService service = new CartService();

    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        HttpSession session = req.getSession(false);
        if (session == null || session.getAttribute("userId") == null) {
            resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }
        int userId = (int) session.getAttribute("userId");
        List<Cart> cartList = service.getCartByUser(userId);

        resp.setContentType("application/json");
        resp.getWriter().write(new Gson().toJson(cartList));
    }

    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        int cartId = Integer.parseInt(req.getParameter("cartId"));
        int quantity = Integer.parseInt(req.getParameter("quantity"));
        service.updateQuantity(cartId, quantity);
        resp.setStatus(HttpServletResponse.SC_OK);
    }

    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        int cartId = Integer.parseInt(req.getParameter("cartId"));
        service.deleteItem(cartId);
        resp.setStatus(HttpServletResponse.SC_OK);
    }
}
```

---

## üé® 5Ô∏è‚É£ Frontend ‚Äî `cart.html` (Tailwind + jQuery)

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>BiteBuddy Cart</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="cart.js"></script>
  <script>
    const contextPath = '/BiteBuddy';
  </script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white font-poppins">
  <nav class="flex justify-between items-center bg-black bg-opacity-70 p-4 backdrop-blur-md">
    <h1 class="text-2xl font-bold text-orange-500">BiteBuddy</h1>
    <ul class="flex gap-5">
      <li><a href="index.jsp" class="hover:text-orange-400">Home</a></li>
      <li><a href="menu.jsp" class="hover:text-orange-400">Menu</a></li>
      <li><a href="#" class="text-orange-400 font-semibold">Cart</a></li>
    </ul>
  </nav>

  <section id="cartSection" class="p-8 grid gap-6"></section>

  <div class="text-center mt-8">
    <button id="placeOrderBtn" class="bg-orange-500 hover:bg-orange-600 px-6 py-3 rounded-lg text-lg font-semibold">Place Order</button>
  </div>
</body>
</html>
```

---

## ‚öôÔ∏è 6Ô∏è‚É£ jQuery Logic ‚Äî `cart.js`

```js
$(document).ready(function () {
  loadCart();

  function loadCart() {
    $.ajax({
      url: `${contextPath}/CartServlet`,
      method: "GET",
      dataType: "json",
      success: function (data) {
        renderCart(data);
      },
      error: function (xhr) {
        if (xhr.status === 401) window.location.href = "login.html";
      }
    });
  }

  function renderCart(items) {
    $("#cartSection").empty();
    if (items.length === 0) {
      $("#cartSection").html("<p class='text-center text-gray-400'>Your cart is empty!</p>");
      return;
    }

    items.forEach(item => {
      const total = (item.price * item.quantity).toFixed(2);
      const card = `
        <div class="flex bg-gray-800 rounded-xl shadow-lg p-4 items-center justify-between">
          <div class="flex items-center gap-4">
            <input type="checkbox" class="itemCheckbox w-5 h-5" data-id="${item.cartId}">
            <img src="${item.imagePath}" class="w-24 h-24 rounded-lg object-cover" alt="${item.itemName}">
            <div>
              <h3 class="text-xl font-semibold text-orange-400">${item.itemName}</h3>
              <p>‚Çπ${item.price}</p>
              <div class="flex items-center gap-2 mt-2">
                <button class="decrease bg-gray-700 px-2 rounded" data-id="${item.cartId}">-</button>
                <span id="qty-${item.cartId}">${item.quantity}</span>
                <button class="increase bg-gray-700 px-2 rounded" data-id="${item.cartId}">+</button>
              </div>
            </div>
          </div>
          <div>
            <p class="text-lg font-semibold">Total: ‚Çπ<span id="total-${item.cartId}">${total}</span></p>
          </div>
        </div>`;
      $("#cartSection").append(card);
    });
  }

  $(document).on("click", ".increase, .decrease", function () {
    const id = $(this).data("id");
    const isIncrease = $(this).hasClass("increase");
    let qty = parseInt($(`#qty-${id}`).text());
    qty = isIncrease ? qty + 1 : Math.max(1, qty - 1);
    $(`#qty-${id}`).text(qty);

    $.post(`${contextPath}/CartServlet`, { cartId: id, quantity: qty });
    const price = parseFloat($(`#total-${id}`).text()) / qty;
    $(`#total-${id}`).text((price * qty).toFixed(2));
  });

  $("#placeOrderBtn").click(function () {
    const selected = $(".itemCheckbox:checked").map(function () {
      return $(this).data("id");
    }).get();

    if (selected.length === 0) {
      alert("Please select at least one item to place an order!");
      return;
    }
    alert("Order placed for items: " + selected.join(", "));
  });
});
```

---

## üß± **7Ô∏è‚É£ Database**

Your existing table `food.M_S_CART` already supports all these features. Just ensure:

* `userid` is stored in session on login
* Each cart item links to a `menu_id` (and hence to a restaurant)

---

Would you like me to extend this with the **‚ÄúPlace Order‚Äù servlet + DAO + table insert logic** next (so it actually creates a record in `M_S_ORDERS` and `M_S_ORDER_ITEM` when clicking the ‚ÄúPlace Order‚Äù button)?

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BiteBuddy - Cart</title>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="../js/cart.js" defer></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white font-poppins">

  <nav class="flex justify-between items-center px-8 py-4 bg-gray-800 bg-opacity-80 backdrop-blur-md sticky top-0 z-50">
    <h1 class="text-2xl font-bold text-red-500">BiteBuddy</h1>
    <ul class="flex gap-6">
      <li><a href="menu.html" class="hover:text-red-500 transition">Menu</a></li>
      <li><a href="restaurant.html" class="hover:text-red-500 transition">restaurant</a></li>
      <li><a href="profile.html" class="text-red-500 font-semibold">profile</a></li>
      <li><a href="orders.html" class="hover:text-red-500 transition">Orders</a></li>
      <li><a href="#" class="hover:text-red-500 transition">LoginOut</a></li>
    </ul>
  </nav>

  <section class="px-8 py-10">
    <h2 class="text-3xl font-bold mb-6 text-center text-red-400">Your Cart </h2>

    <div id="cartContainer" class="space-y-6">
    </div>

    <div class="mt-10 bg-gray-800 rounded-2xl p-6 shadow-xl max-w-xl mx-auto text-center">
      <p class="text-lg mb-2">Selected Items: <span id="selectedCount" class="font-bold">0</span></p>
      <p class="text-xl font-semibold mb-4">Total: ‚Çπ<span id="grandTotal">0</span></p>
      <button id="placeOrder" class="bg-red-500 hover:bg-red-600 px-6 py-3 rounded-xl text-lg font-semibold transition disabled:opacity-50" disabled>
        Place Order
      </button>
    </div>
  </section>

  <footer class="bg-gray-800 py-4 text-center text-gray-400 mt-10">
    &copy; 2025 BiteBuddy. All rights reserved.
  </footer>

</body>
</html>

$(document).ready(function () {
  const $cartContainer = $("#cartContainer");
  const $grandTotal = $("#grandTotal");
  const $selectedCount = $("#selectedCount");
  const $placeOrder = $("#placeOrder");

  let cartItems = [
    {
      id: 1,
      name: "Chicken Biryani",
      price: 150,
      quantity: 2,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    }
    ,
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    },
    {
      id: 2,
      name: "Paneer Butter Masala",
      price: 180,
      quantity: 1,
      image_path: "../Asserts/Images/Restaurant/res-1.jpg"
    }
  ];

  //render cart items
  function renderCart() {
    $cartContainer.empty();
    cartItems.forEach(item => {
      const total = item.price * item.quantity;
      $cartContainer.append(`
        <div class="bg-gray-800 bg-opacity-70 rounded-2xl p-4 flex flex-col md:flex-row items-center justify-between shadow-md hover:shadow-red-400/30 transition">
          <div class="flex items-center gap-4">
            <input type="checkbox" class="select-item w-5 h-5 accent-red-500" data-id="${item.id}">
            <img src="${item.image_path}" alt="${item.name}" class="w-50 h-24 object-cover rounded-xl shadow-lg">
            <div>
              <h3 class="text-xl font-semibold text-red-400">${item.name}</h3>
              <p>‚Çπ${item.price} each</p>
              <p class="mt-1 text-gray-300">Total: ‚Çπ<span class="item-total">${total}</span></p>
            </div>
          </div>
          <div class="flex items-center gap-3 mt-3 md:mt-0">
            <button class="decrease bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded" data-id="${item.id}">-</button>
            <span class="quantity font-bold text-lg">${item.quantity}</span>
            <button class="increase bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded" data-id="${item.id}">+</button>
            <button class="remove bg-red-600 hover:bg-red-700 px-3 py-1 rounded text-sm ml-4" data-id="${item.id}">Remove</button>
          </div>
        </div>
      `);
    });
  }

  //Calculate total for selected items
  function updateTotals() {
    let total = 0, count = 0;
    $(".select-item:checked").each(function () {
      const id = $(this).data("id");
      const item = cartItems.find(i => i.id === id);
      total += item.price * item.quantity;
      count++;
    });
    $grandTotal.text(total);
    $selectedCount.text(count);
    $placeOrder.prop("disabled", count === 0);
  }

  // Initial render
  renderCart();

  // Event: Quantity increase
  $cartContainer.on("click", ".increase", function () {
    const id = $(this).data("id");
    const item = cartItems.find(i => i.id === id);
    item.quantity++;
    renderCart();
    updateTotals();
  });

  // Event: Quantity decrease
  $cartContainer.on("click", ".decrease", function () {
    const id = $(this).data("id");
    const item = cartItems.find(i => i.id === id);
    if (item.quantity > 1) item.quantity--;
    renderCart();
    updateTotals();
  });

  // Event: Remove item
  $cartContainer.on("click", ".remove", function () {
    const id = $(this).data("id");
    cartItems = cartItems.filter(i => i.id !== id);
    renderCart();
    updateTotals();
  });

  // Event: Checkbox toggle
  $cartContainer.on("change", ".select-item", updateTotals);

  // Event: Place Order
  $placeOrder.click(function () {
    const selectedIds = $(".select-item:checked").map(function () {
      return $(this).data("id");
    }).get();

    alert("Placing order for items: " + selectedIds.join(", "));
    // üß† Here, send AJAX POST to your backend /api/order/place
  });
});
